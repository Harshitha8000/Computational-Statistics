[ ]
#PCA
import numpy as np
from statistics import mean
n=int(input(&quot;enter no of variables&quot;))
xi=[]
for i in range(n):
   xi.append([float(x) for x in input().split()])
meu=[]
for i in range(len(xi)):

  meu.append(mean(xi[i]))
print(meu)
x=transpose(xi)
print(x)
import numpy as np
import pandas as pd
t=[]
for i in range(len(x)):
  s=[]
  for j in range(len(x[i])):
       s.append(x[i][j]-meu[j])
  t.append(s)
c=np.dot(transpose(t),t)/len(x)
eigenvalues,eigenvectors= np.linalg.eig(c)
idx=np.argsort(eigenvalues)[::-1]
eigenvalues=eigenvalues[idx]
print(eigenvalues)
eigenvectors=eigenvectors[:,idx]
print(eigenvectors)
tl=float(input(&quot;enter threshold limit&quot;))
#how many principal components to be retained
k={&quot;principal components&quot;:[&#39;z&#39;+&quot;%s&quot; %(i+1) for i in range(len(eigenvalu
es))],&quot;variance explained&quot;:[i for i in eigenvalues]}
d=pd.DataFrame(k)
cs=[]
for i in range(len(eigenvalues)):
       cs.append((sum(eigenvalues[0:i+1])/sum(eigenvalues))*100)
d[&quot;cumulative proporion &quot;]=cs
print(d)
c=0
for i in range(len(eigenvalues)):
   if cs[i]&lt;tl:
      c=c+1
c=c+1
eigenvalues=eigenvalues[0:c]
eigenvectors=eigenvectors[:,0:c]
print(eigenvalues)
print(eigenvectors)
import pandas as pd

l=pd.DataFrame()
for i in range(len(xi)):
   stri=&#39;x&#39;+&#39;%s&#39;%(i+1)
   l[stri]=xi[i]
vc=0
for i in range(len(eigenvalues)):
    striz=&#39;z&#39;+&#39;%s&#39;%(i+1)
    l[striz]=0
    vr=0
    for j in range(len(xi)):
      stri=&#39;x&#39;+&#39;%s&#39;%(j+1)
      l[striz]+=l[stri]*eigenvectors[vr][vc]
      vr=vr+1
    vc=vc+1
print(l)
   
output:
enter no of variables3
7 4 6 8 8 7 5 9 7 8
4 1 3 6 5 2 3 5 4 2
3 8 5 1 7 9 3 8 5 2
[6.9, 3.5, 5.1]
[[7.0, 4.0, 3.0], [4.0, 1.0, 8.0], [6.0, 3.0, 5.0], [8.0, 6.0, 1.0], [8
.0, 5.0, 7.0], [7.0, 2.0, 9.0], [5.0, 3.0, 3.0], [9.0, 5.0, 8.0], [7.0,
 4.0, 5.0], [8.0, 2.0, 2.0]]
[7.44654832 3.30851634 0.67493534]
[[-0.1375708   0.69903712 -0.70172743]
 [-0.25045969  0.66088917  0.70745703]
 [ 0.95830278  0.27307986  0.08416157]]
enter threshold limit90
  principal components  variance explained  cumulative proporion 
0                   z1            7.446548              65.149154
1                   z2            3.308516              94.095054
2                   z3            0.674935             100.000000
[7.44654832 3.30851634]
[[-0.1375708   0.69903712]
 [-0.25045969  0.66088917]
 [ 0.95830278  0.27307986]]
    x1   x2   x3        z1         z2

0  7.0  4.0  3.0  0.910074   8.356056
1  4.0  1.0  8.0  6.865679   5.641677
2  6.0  3.0  5.0  3.214710   7.542290
3  8.0  6.0  1.0 -1.645022   9.830712
4  8.0  5.0  7.0  4.355255  10.808302
5  7.0  2.0  9.0  7.160810   8.672757
6  5.0  3.0  3.0  1.435675   6.297093
7  9.0  5.0  8.0  5.175987  11.780419
8  7.0  4.0  5.0  2.826680   8.902216
9  8.0  2.0  2.0  0.315120   7.460235
enter no of variables2
2 1 0 -1
4 3 1 0.5
[0.5, 2.125]
[[2.0, 4.0], [1.0, 3.0], [0.0, 1.0], [-1.0, 0.5]]
[3.26093826 0.03593674]
[[-0.6135581  -0.78964958]
 [-0.78964958  0.6135581 ]]
enter threshold limit99
  principal components  variance explained  cumulative proporion 
0                   z1            3.260938              98.909976
1                   z2            0.035937             100.000000
[3.26093826 0.03593674]
[[-0.6135581  -0.78964958]
 [-0.78964958  0.6135581 ]]
    x1   x2        z1        z2
0  2.0  4.0 -4.385715  0.874933
1  1.0  3.0 -2.982507  1.051025
2  0.0  1.0 -0.789650  0.613558
3 -1.0  0.5  0.218733  1.096429
